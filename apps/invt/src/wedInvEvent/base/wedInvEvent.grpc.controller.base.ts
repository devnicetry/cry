/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { WedInvEventService } from "../wedInvEvent.service";
import { WedInvEventCreateInput } from "./WedInvEventCreateInput";
import { WedInvEventWhereInput } from "./WedInvEventWhereInput";
import { WedInvEventWhereUniqueInput } from "./WedInvEventWhereUniqueInput";
import { WedInvEventFindManyArgs } from "./WedInvEventFindManyArgs";
import { WedInvEventUpdateInput } from "./WedInvEventUpdateInput";
import { WedInvEvent } from "./WedInvEvent";

export class WedInvEventGrpcControllerBase {
  constructor(protected readonly service: WedInvEventService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WedInvEvent })
  @GrpcMethod("WedInvEventService", "createWedInvEvent")
  async createWedInvEvent(
    @common.Body() data: WedInvEventCreateInput
  ): Promise<WedInvEvent> {
    return await this.service.createWedInvEvent({
      data: {
        ...data,

        wedInv: data.wedInv
          ? {
              connect: data.wedInv,
            }
          : undefined,
      },
      select: {
        address: true,
        createdAt: true,
        date: true,
        eventEnd: true,
        eventStart: true,
        id: true,
        maps: true,
        name: true,
        place: true,
        updatedAt: true,

        wedInv: {
          select: {
            id: true,
          },
        },

        zone: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WedInvEvent] })
  @ApiNestedQuery(WedInvEventFindManyArgs)
  @GrpcMethod("WedInvEventService", "wedInvEvents")
  async wedInvEvents(@common.Req() request: Request): Promise<WedInvEvent[]> {
    const args = plainToClass(WedInvEventFindManyArgs, request.query);
    return this.service.wedInvEvents({
      ...args,
      select: {
        address: true,
        createdAt: true,
        date: true,
        eventEnd: true,
        eventStart: true,
        id: true,
        maps: true,
        name: true,
        place: true,
        updatedAt: true,

        wedInv: {
          select: {
            id: true,
          },
        },

        zone: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WedInvEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("WedInvEventService", "wedInvEvent")
  async wedInvEvent(
    @common.Param() params: WedInvEventWhereUniqueInput
  ): Promise<WedInvEvent | null> {
    const result = await this.service.wedInvEvent({
      where: params,
      select: {
        address: true,
        createdAt: true,
        date: true,
        eventEnd: true,
        eventStart: true,
        id: true,
        maps: true,
        name: true,
        place: true,
        updatedAt: true,

        wedInv: {
          select: {
            id: true,
          },
        },

        zone: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WedInvEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("WedInvEventService", "updateWedInvEvent")
  async updateWedInvEvent(
    @common.Param() params: WedInvEventWhereUniqueInput,
    @common.Body() data: WedInvEventUpdateInput
  ): Promise<WedInvEvent | null> {
    try {
      return await this.service.updateWedInvEvent({
        where: params,
        data: {
          ...data,

          wedInv: data.wedInv
            ? {
                connect: data.wedInv,
              }
            : undefined,
        },
        select: {
          address: true,
          createdAt: true,
          date: true,
          eventEnd: true,
          eventStart: true,
          id: true,
          maps: true,
          name: true,
          place: true,
          updatedAt: true,

          wedInv: {
            select: {
              id: true,
            },
          },

          zone: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WedInvEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("WedInvEventService", "deleteWedInvEvent")
  async deleteWedInvEvent(
    @common.Param() params: WedInvEventWhereUniqueInput
  ): Promise<WedInvEvent | null> {
    try {
      return await this.service.deleteWedInvEvent({
        where: params,
        select: {
          address: true,
          createdAt: true,
          date: true,
          eventEnd: true,
          eventStart: true,
          id: true,
          maps: true,
          name: true,
          place: true,
          updatedAt: true,

          wedInv: {
            select: {
              id: true,
            },
          },

          zone: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
