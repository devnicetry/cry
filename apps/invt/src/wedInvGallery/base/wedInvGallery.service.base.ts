/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  WedInvGallery as PrismaWedInvGallery,
  WedInv as PrismaWedInv,
} from "@prisma/client";

export class WedInvGalleryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WedInvGalleryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.wedInvGallery.count(args);
  }

  async wedInvGalleries<T extends Prisma.WedInvGalleryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvGalleryFindManyArgs>
  ): Promise<PrismaWedInvGallery[]> {
    return this.prisma.wedInvGallery.findMany<Prisma.WedInvGalleryFindManyArgs>(
      args
    );
  }
  async wedInvGallery<T extends Prisma.WedInvGalleryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvGalleryFindUniqueArgs>
  ): Promise<PrismaWedInvGallery | null> {
    return this.prisma.wedInvGallery.findUnique(args);
  }
  async createWedInvGallery<T extends Prisma.WedInvGalleryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvGalleryCreateArgs>
  ): Promise<PrismaWedInvGallery> {
    return this.prisma.wedInvGallery.create<T>(args);
  }
  async updateWedInvGallery<T extends Prisma.WedInvGalleryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvGalleryUpdateArgs>
  ): Promise<PrismaWedInvGallery> {
    return this.prisma.wedInvGallery.update<T>(args);
  }
  async deleteWedInvGallery<T extends Prisma.WedInvGalleryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvGalleryDeleteArgs>
  ): Promise<PrismaWedInvGallery> {
    return this.prisma.wedInvGallery.delete(args);
  }

  async getWedInvId(parentId: string): Promise<PrismaWedInv | null> {
    return this.prisma.wedInvGallery
      .findUnique({
        where: { id: parentId },
      })
      .wedInvId();
  }
}
