/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DtPaymentMethod as PrismaDtPaymentMethod,
  WedInvPayment as PrismaWedInvPayment,
} from "@prisma/client";

export class DtPaymentMethodServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DtPaymentMethodCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dtPaymentMethod.count(args);
  }

  async dtPaymentMethods<T extends Prisma.DtPaymentMethodFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DtPaymentMethodFindManyArgs>
  ): Promise<PrismaDtPaymentMethod[]> {
    return this.prisma.dtPaymentMethod.findMany<Prisma.DtPaymentMethodFindManyArgs>(
      args
    );
  }
  async dtPaymentMethod<T extends Prisma.DtPaymentMethodFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DtPaymentMethodFindUniqueArgs>
  ): Promise<PrismaDtPaymentMethod | null> {
    return this.prisma.dtPaymentMethod.findUnique(args);
  }
  async createDtPaymentMethod<T extends Prisma.DtPaymentMethodCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DtPaymentMethodCreateArgs>
  ): Promise<PrismaDtPaymentMethod> {
    return this.prisma.dtPaymentMethod.create<T>(args);
  }
  async updateDtPaymentMethod<T extends Prisma.DtPaymentMethodUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DtPaymentMethodUpdateArgs>
  ): Promise<PrismaDtPaymentMethod> {
    return this.prisma.dtPaymentMethod.update<T>(args);
  }
  async deleteDtPaymentMethod<T extends Prisma.DtPaymentMethodDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DtPaymentMethodDeleteArgs>
  ): Promise<PrismaDtPaymentMethod> {
    return this.prisma.dtPaymentMethod.delete(args);
  }

  async findWedInvPayments(
    parentId: string,
    args: Prisma.WedInvPaymentFindManyArgs
  ): Promise<PrismaWedInvPayment[]> {
    return this.prisma.dtPaymentMethod
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .wedInvPayments(args);
  }
}
