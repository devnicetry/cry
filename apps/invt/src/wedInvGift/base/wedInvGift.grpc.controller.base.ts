/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { WedInvGiftService } from "../wedInvGift.service";
import { WedInvGiftCreateInput } from "./WedInvGiftCreateInput";
import { WedInvGiftWhereInput } from "./WedInvGiftWhereInput";
import { WedInvGiftWhereUniqueInput } from "./WedInvGiftWhereUniqueInput";
import { WedInvGiftFindManyArgs } from "./WedInvGiftFindManyArgs";
import { WedInvGiftUpdateInput } from "./WedInvGiftUpdateInput";
import { WedInvGift } from "./WedInvGift";

export class WedInvGiftGrpcControllerBase {
  constructor(protected readonly service: WedInvGiftService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WedInvGift })
  @GrpcMethod("WedInvGiftService", "createWedInvGift")
  async createWedInvGift(
    @common.Body() data: WedInvGiftCreateInput
  ): Promise<WedInvGift> {
    return await this.service.createWedInvGift({
      data: {
        ...data,

        dtGift: data.dtGift
          ? {
              connect: data.dtGift,
            }
          : undefined,

        wedInv: data.wedInv
          ? {
              connect: data.wedInv,
            }
          : undefined,
      },
      select: {
        accountName: true,
        accountNo: true,
        accountPhoto: true,
        createdAt: true,
        details: true,

        dtGift: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,

        wedInv: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WedInvGift] })
  @ApiNestedQuery(WedInvGiftFindManyArgs)
  @GrpcMethod("WedInvGiftService", "wedInvGifts")
  async wedInvGifts(@common.Req() request: Request): Promise<WedInvGift[]> {
    const args = plainToClass(WedInvGiftFindManyArgs, request.query);
    return this.service.wedInvGifts({
      ...args,
      select: {
        accountName: true,
        accountNo: true,
        accountPhoto: true,
        createdAt: true,
        details: true,

        dtGift: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,

        wedInv: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WedInvGift })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("WedInvGiftService", "wedInvGift")
  async wedInvGift(
    @common.Param() params: WedInvGiftWhereUniqueInput
  ): Promise<WedInvGift | null> {
    const result = await this.service.wedInvGift({
      where: params,
      select: {
        accountName: true,
        accountNo: true,
        accountPhoto: true,
        createdAt: true,
        details: true,

        dtGift: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,

        wedInv: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WedInvGift })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("WedInvGiftService", "updateWedInvGift")
  async updateWedInvGift(
    @common.Param() params: WedInvGiftWhereUniqueInput,
    @common.Body() data: WedInvGiftUpdateInput
  ): Promise<WedInvGift | null> {
    try {
      return await this.service.updateWedInvGift({
        where: params,
        data: {
          ...data,

          dtGift: data.dtGift
            ? {
                connect: data.dtGift,
              }
            : undefined,

          wedInv: data.wedInv
            ? {
                connect: data.wedInv,
              }
            : undefined,
        },
        select: {
          accountName: true,
          accountNo: true,
          accountPhoto: true,
          createdAt: true,
          details: true,

          dtGift: {
            select: {
              id: true,
            },
          },

          id: true,
          updatedAt: true,

          wedInv: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WedInvGift })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("WedInvGiftService", "deleteWedInvGift")
  async deleteWedInvGift(
    @common.Param() params: WedInvGiftWhereUniqueInput
  ): Promise<WedInvGift | null> {
    try {
      return await this.service.deleteWedInvGift({
        where: params,
        select: {
          accountName: true,
          accountNo: true,
          accountPhoto: true,
          createdAt: true,
          details: true,

          dtGift: {
            select: {
              id: true,
            },
          },

          id: true,
          updatedAt: true,

          wedInv: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
