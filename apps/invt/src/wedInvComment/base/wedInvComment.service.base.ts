/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WedInvComment as PrismaWedInvComment,
  WedInv as PrismaWedInv,
  WedInvShare as PrismaWedInvShare,
} from "@prisma/client";

export class WedInvCommentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WedInvCommentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.wedInvComment.count(args);
  }

  async wedInvComments<T extends Prisma.WedInvCommentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvCommentFindManyArgs>
  ): Promise<PrismaWedInvComment[]> {
    return this.prisma.wedInvComment.findMany<Prisma.WedInvCommentFindManyArgs>(
      args
    );
  }
  async wedInvComment<T extends Prisma.WedInvCommentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvCommentFindUniqueArgs>
  ): Promise<PrismaWedInvComment | null> {
    return this.prisma.wedInvComment.findUnique(args);
  }
  async createWedInvComment<T extends Prisma.WedInvCommentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvCommentCreateArgs>
  ): Promise<PrismaWedInvComment> {
    return this.prisma.wedInvComment.create<T>(args);
  }
  async updateWedInvComment<T extends Prisma.WedInvCommentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvCommentUpdateArgs>
  ): Promise<PrismaWedInvComment> {
    return this.prisma.wedInvComment.update<T>(args);
  }
  async deleteWedInvComment<T extends Prisma.WedInvCommentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvCommentDeleteArgs>
  ): Promise<PrismaWedInvComment> {
    return this.prisma.wedInvComment.delete(args);
  }

  async getWedInvId(parentId: string): Promise<PrismaWedInv | null> {
    return this.prisma.wedInvComment
      .findUnique({
        where: { id: parentId },
      })
      .wedInvId();
  }

  async getWedInvShareId(parentId: string): Promise<PrismaWedInvShare | null> {
    return this.prisma.wedInvComment
      .findUnique({
        where: { id: parentId },
      })
      .wedInvShareId();
  }
}
