/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Public } from "../../decorators/public.decorator";
import { WedInvComment } from "./WedInvComment";
import { WedInvCommentCountArgs } from "./WedInvCommentCountArgs";
import { WedInvCommentFindManyArgs } from "./WedInvCommentFindManyArgs";
import { WedInvCommentFindUniqueArgs } from "./WedInvCommentFindUniqueArgs";
import { CreateWedInvCommentArgs } from "./CreateWedInvCommentArgs";
import { UpdateWedInvCommentArgs } from "./UpdateWedInvCommentArgs";
import { DeleteWedInvCommentArgs } from "./DeleteWedInvCommentArgs";
import { WedInv } from "../../wedInv/base/WedInv";
import { WedInvShare } from "../../wedInvShare/base/WedInvShare";
import { WedInvCommentService } from "../wedInvComment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WedInvComment)
export class WedInvCommentResolverBase {
  constructor(
    protected readonly service: WedInvCommentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WedInvComment",
    action: "read",
    possession: "any",
  })
  async _wedInvCommentsMeta(
    @graphql.Args() args: WedInvCommentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WedInvComment])
  @nestAccessControl.UseRoles({
    resource: "WedInvComment",
    action: "read",
    possession: "any",
  })
  async wedInvComments(
    @graphql.Args() args: WedInvCommentFindManyArgs
  ): Promise<WedInvComment[]> {
    return this.service.wedInvComments(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WedInvComment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WedInvComment",
    action: "read",
    possession: "own",
  })
  async wedInvComment(
    @graphql.Args() args: WedInvCommentFindUniqueArgs
  ): Promise<WedInvComment | null> {
    const result = await this.service.wedInvComment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WedInvComment)
  @nestAccessControl.UseRoles({
    resource: "WedInvComment",
    action: "create",
    possession: "any",
  })
  async createWedInvComment(
    @graphql.Args() args: CreateWedInvCommentArgs
  ): Promise<WedInvComment> {
    return await this.service.createWedInvComment({
      ...args,
      data: {
        ...args.data,

        wedInvId: args.data.wedInvId
          ? {
              connect: args.data.wedInvId,
            }
          : undefined,

        wedInvShareId: args.data.wedInvShareId
          ? {
              connect: args.data.wedInvShareId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WedInvComment)
  @nestAccessControl.UseRoles({
    resource: "WedInvComment",
    action: "update",
    possession: "any",
  })
  async updateWedInvComment(
    @graphql.Args() args: UpdateWedInvCommentArgs
  ): Promise<WedInvComment | null> {
    try {
      return await this.service.updateWedInvComment({
        ...args,
        data: {
          ...args.data,

          wedInvId: args.data.wedInvId
            ? {
                connect: args.data.wedInvId,
              }
            : undefined,

          wedInvShareId: args.data.wedInvShareId
            ? {
                connect: args.data.wedInvShareId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WedInvComment)
  @nestAccessControl.UseRoles({
    resource: "WedInvComment",
    action: "delete",
    possession: "any",
  })
  async deleteWedInvComment(
    @graphql.Args() args: DeleteWedInvCommentArgs
  ): Promise<WedInvComment | null> {
    try {
      return await this.service.deleteWedInvComment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.ResolveField(() => WedInv, {
    nullable: true,
    name: "wedInvId",
  })
  async getWedInvId(
    @graphql.Parent() parent: WedInvComment
  ): Promise<WedInv | null> {
    const result = await this.service.getWedInvId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => WedInvShare, {
    nullable: true,
    name: "wedInvShareId",
  })
  @nestAccessControl.UseRoles({
    resource: "WedInvShare",
    action: "read",
    possession: "any",
  })
  async getWedInvShareId(
    @graphql.Parent() parent: WedInvComment
  ): Promise<WedInvShare | null> {
    const result = await this.service.getWedInvShareId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
