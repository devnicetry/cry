/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { WedInvCommentService } from "../wedInvComment.service";
import { WedInvCommentCreateInput } from "./WedInvCommentCreateInput";
import { WedInvCommentWhereInput } from "./WedInvCommentWhereInput";
import { WedInvCommentWhereUniqueInput } from "./WedInvCommentWhereUniqueInput";
import { WedInvCommentFindManyArgs } from "./WedInvCommentFindManyArgs";
import { WedInvCommentUpdateInput } from "./WedInvCommentUpdateInput";
import { WedInvComment } from "./WedInvComment";

export class WedInvCommentGrpcControllerBase {
  constructor(protected readonly service: WedInvCommentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WedInvComment })
  @GrpcMethod("WedInvCommentService", "createWedInvComment")
  async createWedInvComment(
    @common.Body() data: WedInvCommentCreateInput
  ): Promise<WedInvComment> {
    return await this.service.createWedInvComment({
      data: {
        ...data,

        wedInv: data.wedInv
          ? {
              connect: data.wedInv,
            }
          : undefined,

        wedInvShare: data.wedInvShare
          ? {
              connect: data.wedInvShare,
            }
          : undefined,
      },
      select: {
        comment: true,
        confirmation: true,
        createdAt: true,
        id: true,
        moment: true,
        name: true,
        updatedAt: true,

        wedInv: {
          select: {
            id: true,
          },
        },

        wedInvShare: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WedInvComment] })
  @ApiNestedQuery(WedInvCommentFindManyArgs)
  @GrpcMethod("WedInvCommentService", "wedInvComments")
  async wedInvComments(
    @common.Req() request: Request
  ): Promise<WedInvComment[]> {
    const args = plainToClass(WedInvCommentFindManyArgs, request.query);
    return this.service.wedInvComments({
      ...args,
      select: {
        comment: true,
        confirmation: true,
        createdAt: true,
        id: true,
        moment: true,
        name: true,
        updatedAt: true,

        wedInv: {
          select: {
            id: true,
          },
        },

        wedInvShare: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WedInvComment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("WedInvCommentService", "wedInvComment")
  async wedInvComment(
    @common.Param() params: WedInvCommentWhereUniqueInput
  ): Promise<WedInvComment | null> {
    const result = await this.service.wedInvComment({
      where: params,
      select: {
        comment: true,
        confirmation: true,
        createdAt: true,
        id: true,
        moment: true,
        name: true,
        updatedAt: true,

        wedInv: {
          select: {
            id: true,
          },
        },

        wedInvShare: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WedInvComment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("WedInvCommentService", "updateWedInvComment")
  async updateWedInvComment(
    @common.Param() params: WedInvCommentWhereUniqueInput,
    @common.Body() data: WedInvCommentUpdateInput
  ): Promise<WedInvComment | null> {
    try {
      return await this.service.updateWedInvComment({
        where: params,
        data: {
          ...data,

          wedInv: data.wedInv
            ? {
                connect: data.wedInv,
              }
            : undefined,

          wedInvShare: data.wedInvShare
            ? {
                connect: data.wedInvShare,
              }
            : undefined,
        },
        select: {
          comment: true,
          confirmation: true,
          createdAt: true,
          id: true,
          moment: true,
          name: true,
          updatedAt: true,

          wedInv: {
            select: {
              id: true,
            },
          },

          wedInvShare: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WedInvComment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("WedInvCommentService", "deleteWedInvComment")
  async deleteWedInvComment(
    @common.Param() params: WedInvCommentWhereUniqueInput
  ): Promise<WedInvComment | null> {
    try {
      return await this.service.deleteWedInvComment({
        where: params,
        select: {
          comment: true,
          confirmation: true,
          createdAt: true,
          id: true,
          moment: true,
          name: true,
          updatedAt: true,

          wedInv: {
            select: {
              id: true,
            },
          },

          wedInvShare: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
