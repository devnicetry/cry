/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { WedInvService } from "../wedInv.service";
import { Public } from "../../decorators/public.decorator";
import { WedInvCreateInput } from "./WedInvCreateInput";
import { WedInvWhereInput } from "./WedInvWhereInput";
import { WedInvWhereUniqueInput } from "./WedInvWhereUniqueInput";
import { WedInvFindManyArgs } from "./WedInvFindManyArgs";
import { WedInvUpdateInput } from "./WedInvUpdateInput";
import { WedInv } from "./WedInv";
import { WedInvCommentFindManyArgs } from "../../wedInvComment/base/WedInvCommentFindManyArgs";
import { WedInvComment } from "../../wedInvComment/base/WedInvComment";
import { WedInvCommentWhereUniqueInput } from "../../wedInvComment/base/WedInvCommentWhereUniqueInput";
import { WedInvEventFindManyArgs } from "../../wedInvEvent/base/WedInvEventFindManyArgs";
import { WedInvEvent } from "../../wedInvEvent/base/WedInvEvent";
import { WedInvEventWhereUniqueInput } from "../../wedInvEvent/base/WedInvEventWhereUniqueInput";
import { WedInvGalleryFindManyArgs } from "../../wedInvGallery/base/WedInvGalleryFindManyArgs";
import { WedInvGallery } from "../../wedInvGallery/base/WedInvGallery";
import { WedInvGalleryWhereUniqueInput } from "../../wedInvGallery/base/WedInvGalleryWhereUniqueInput";
import { WedInvGiftFindManyArgs } from "../../wedInvGift/base/WedInvGiftFindManyArgs";
import { WedInvGift } from "../../wedInvGift/base/WedInvGift";
import { WedInvGiftWhereUniqueInput } from "../../wedInvGift/base/WedInvGiftWhereUniqueInput";
import { WedInvPaymentFindManyArgs } from "../../wedInvPayment/base/WedInvPaymentFindManyArgs";
import { WedInvPayment } from "../../wedInvPayment/base/WedInvPayment";
import { WedInvPaymentWhereUniqueInput } from "../../wedInvPayment/base/WedInvPaymentWhereUniqueInput";
import { WedInvPresetFindManyArgs } from "../../wedInvPreset/base/WedInvPresetFindManyArgs";
import { WedInvPreset } from "../../wedInvPreset/base/WedInvPreset";
import { WedInvPresetWhereUniqueInput } from "../../wedInvPreset/base/WedInvPresetWhereUniqueInput";
import { WedInvShareFindManyArgs } from "../../wedInvShare/base/WedInvShareFindManyArgs";
import { WedInvShare } from "../../wedInvShare/base/WedInvShare";
import { WedInvShareWhereUniqueInput } from "../../wedInvShare/base/WedInvShareWhereUniqueInput";
import { WedInvStoryFindManyArgs } from "../../wedInvStory/base/WedInvStoryFindManyArgs";
import { WedInvStory } from "../../wedInvStory/base/WedInvStory";
import { WedInvStoryWhereUniqueInput } from "../../wedInvStory/base/WedInvStoryWhereUniqueInput";
import { WedInvVideoFindManyArgs } from "../../wedInvVideo/base/WedInvVideoFindManyArgs";
import { WedInvVideo } from "../../wedInvVideo/base/WedInvVideo";
import { WedInvVideoWhereUniqueInput } from "../../wedInvVideo/base/WedInvVideoWhereUniqueInput";
import { WedInvWeddingFindManyArgs } from "../../wedInvWedding/base/WedInvWeddingFindManyArgs";
import { WedInvWedding } from "../../wedInvWedding/base/WedInvWedding";
import { WedInvWeddingWhereUniqueInput } from "../../wedInvWedding/base/WedInvWeddingWhereUniqueInput";

export class WedInvGrpcControllerBase {
  constructor(protected readonly service: WedInvService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WedInv })
  @GrpcMethod("WedInvService", "createWedInv")
  async createWedInv(@common.Body() data: WedInvCreateInput): Promise<WedInv> {
    return await this.service.createWedInv({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
        url: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WedInv] })
  @ApiNestedQuery(WedInvFindManyArgs)
  @GrpcMethod("WedInvService", "wedInvs")
  async wedInvs(@common.Req() request: Request): Promise<WedInv[]> {
    const args = plainToClass(WedInvFindManyArgs, request.query);
    return this.service.wedInvs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
        url: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @Public()
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WedInv })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("WedInvService", "wedInv")
  async wedInv(
    @common.Param() params: WedInvWhereUniqueInput
  ): Promise<WedInv | null> {
    const result = await this.service.wedInv({
      where: params,
      select: {
        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
        url: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WedInv })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("WedInvService", "updateWedInv")
  async updateWedInv(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() data: WedInvUpdateInput
  ): Promise<WedInv | null> {
    try {
      return await this.service.updateWedInv({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          status: true,
          updatedAt: true,
          url: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WedInv })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("WedInvService", "deleteWedInv")
  async deleteWedInv(
    @common.Param() params: WedInvWhereUniqueInput
  ): Promise<WedInv | null> {
    try {
      return await this.service.deleteWedInv({
        where: params,
        select: {
          createdAt: true,
          id: true,
          status: true,
          updatedAt: true,
          url: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/wedInvComments")
  @ApiNestedQuery(WedInvCommentFindManyArgs)
  @GrpcMethod("WedInvService", "findManyWedInvComments")
  async findManyWedInvComments(
    @common.Req() request: Request,
    @common.Param() params: WedInvWhereUniqueInput
  ): Promise<WedInvComment[]> {
    const query = plainToClass(WedInvCommentFindManyArgs, request.query);
    const results = await this.service.findWedInvComments(params.id, {
      ...query,
      select: {
        comment: true,
        confirmation: true,
        createdAt: true,
        id: true,
        moment: true,
        name: true,
        updatedAt: true,

        wedInv: {
          select: {
            id: true,
          },
        },

        wedInvShare: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/wedInvComments")
  @GrpcMethod("WedInvService", "connectWedInvComments")
  async connectWedInvComments(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvCommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvComments: {
        connect: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/wedInvComments")
  @GrpcMethod("WedInvService", "updateWedInvComments")
  async updateWedInvComments(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvCommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvComments: {
        set: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/wedInvComments")
  @GrpcMethod("WedInvService", "disconnectWedInvComments")
  async disconnectWedInvComments(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvCommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvComments: {
        disconnect: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/wedInvEvents")
  @ApiNestedQuery(WedInvEventFindManyArgs)
  @GrpcMethod("WedInvService", "findManyWedInvEvents")
  async findManyWedInvEvents(
    @common.Req() request: Request,
    @common.Param() params: WedInvWhereUniqueInput
  ): Promise<WedInvEvent[]> {
    const query = plainToClass(WedInvEventFindManyArgs, request.query);
    const results = await this.service.findWedInvEvents(params.id, {
      ...query,
      select: {
        address: true,
        createdAt: true,
        date: true,
        eventEnd: true,
        eventStart: true,
        id: true,
        maps: true,
        name: true,
        place: true,
        updatedAt: true,

        wedInv: {
          select: {
            id: true,
          },
        },

        zone: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/wedInvEvents")
  @GrpcMethod("WedInvService", "connectWedInvEvents")
  async connectWedInvEvents(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvEventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvEvents: {
        connect: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/wedInvEvents")
  @GrpcMethod("WedInvService", "updateWedInvEvents")
  async updateWedInvEvents(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvEventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvEvents: {
        set: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/wedInvEvents")
  @GrpcMethod("WedInvService", "disconnectWedInvEvents")
  async disconnectWedInvEvents(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvEventWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvEvents: {
        disconnect: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/wedInvGalleries")
  @ApiNestedQuery(WedInvGalleryFindManyArgs)
  @GrpcMethod("WedInvService", "findManyWedInvGalleries")
  async findManyWedInvGalleries(
    @common.Req() request: Request,
    @common.Param() params: WedInvWhereUniqueInput
  ): Promise<WedInvGallery[]> {
    const query = plainToClass(WedInvGalleryFindManyArgs, request.query);
    const results = await this.service.findWedInvGalleries(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        name: true,
        photo: true,
        updatedAt: true,

        wedInv: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/wedInvGalleries")
  @GrpcMethod("WedInvService", "connectWedInvGalleries")
  async connectWedInvGalleries(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvGalleryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvGalleries: {
        connect: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/wedInvGalleries")
  @GrpcMethod("WedInvService", "updateWedInvGalleries")
  async updateWedInvGalleries(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvGalleryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvGalleries: {
        set: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/wedInvGalleries")
  @GrpcMethod("WedInvService", "disconnectWedInvGalleries")
  async disconnectWedInvGalleries(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvGalleryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvGalleries: {
        disconnect: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/wedInvGifts")
  @ApiNestedQuery(WedInvGiftFindManyArgs)
  @GrpcMethod("WedInvService", "findManyWedInvGifts")
  async findManyWedInvGifts(
    @common.Req() request: Request,
    @common.Param() params: WedInvWhereUniqueInput
  ): Promise<WedInvGift[]> {
    const query = plainToClass(WedInvGiftFindManyArgs, request.query);
    const results = await this.service.findWedInvGifts(params.id, {
      ...query,
      select: {
        accountName: true,
        accountNo: true,
        accountPhoto: true,
        createdAt: true,
        details: true,

        dtGift: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,

        wedInv: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/wedInvGifts")
  @GrpcMethod("WedInvService", "connectWedInvGifts")
  async connectWedInvGifts(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvGiftWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvGifts: {
        connect: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/wedInvGifts")
  @GrpcMethod("WedInvService", "updateWedInvGifts")
  async updateWedInvGifts(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvGiftWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvGifts: {
        set: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/wedInvGifts")
  @GrpcMethod("WedInvService", "disconnectWedInvGifts")
  async disconnectWedInvGifts(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvGiftWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvGifts: {
        disconnect: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/wedInvPayments")
  @ApiNestedQuery(WedInvPaymentFindManyArgs)
  @GrpcMethod("WedInvService", "findManyWedInvPayments")
  async findManyWedInvPayments(
    @common.Req() request: Request,
    @common.Param() params: WedInvWhereUniqueInput
  ): Promise<WedInvPayment[]> {
    const query = plainToClass(WedInvPaymentFindManyArgs, request.query);
    const results = await this.service.findWedInvPayments(params.id, {
      ...query,
      select: {
        accountName: true,
        accountNo: true,
        amount: true,
        createdAt: true,

        dtPaymentMethod: {
          select: {
            id: true,
          },
        },

        evidence: true,
        id: true,
        noRef: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        wedInv: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/wedInvPayments")
  @GrpcMethod("WedInvService", "connectWedInvPayments")
  async connectWedInvPayments(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvPayments: {
        connect: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/wedInvPayments")
  @GrpcMethod("WedInvService", "updateWedInvPayments")
  async updateWedInvPayments(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvPayments: {
        set: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/wedInvPayments")
  @GrpcMethod("WedInvService", "disconnectWedInvPayments")
  async disconnectWedInvPayments(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvPayments: {
        disconnect: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/wedInvPresets")
  @ApiNestedQuery(WedInvPresetFindManyArgs)
  @GrpcMethod("WedInvService", "findManyWedInvPresets")
  async findManyWedInvPresets(
    @common.Req() request: Request,
    @common.Param() params: WedInvWhereUniqueInput
  ): Promise<WedInvPreset[]> {
    const query = plainToClass(WedInvPresetFindManyArgs, request.query);
    const results = await this.service.findWedInvPresets(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,

        wedInv: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/wedInvPresets")
  @GrpcMethod("WedInvService", "connectWedInvPresets")
  async connectWedInvPresets(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvPresetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvPresets: {
        connect: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/wedInvPresets")
  @GrpcMethod("WedInvService", "updateWedInvPresets")
  async updateWedInvPresets(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvPresetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvPresets: {
        set: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/wedInvPresets")
  @GrpcMethod("WedInvService", "disconnectWedInvPresets")
  async disconnectWedInvPresets(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvPresetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvPresets: {
        disconnect: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/wedInvShares")
  @ApiNestedQuery(WedInvShareFindManyArgs)
  @GrpcMethod("WedInvService", "findManyWedInvShares")
  async findManyWedInvShares(
    @common.Req() request: Request,
    @common.Param() params: WedInvWhereUniqueInput
  ): Promise<WedInvShare[]> {
    const query = plainToClass(WedInvShareFindManyArgs, request.query);
    const results = await this.service.findWedInvShares(params.id, {
      ...query,
      select: {
        createdAt: true,
        frequency: true,
        id: true,
        identity: true,
        link: true,
        name: true,
        open: true,
        updatedAt: true,

        wedInv: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/wedInvShares")
  @GrpcMethod("WedInvService", "connectWedInvShares")
  async connectWedInvShares(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvShareWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvShares: {
        connect: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/wedInvShares")
  @GrpcMethod("WedInvService", "updateWedInvShares")
  async updateWedInvShares(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvShareWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvShares: {
        set: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/wedInvShares")
  @GrpcMethod("WedInvService", "disconnectWedInvShares")
  async disconnectWedInvShares(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvShareWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvShares: {
        disconnect: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/wedInvStories")
  @ApiNestedQuery(WedInvStoryFindManyArgs)
  @GrpcMethod("WedInvService", "findManyWedInvStories")
  async findManyWedInvStories(
    @common.Req() request: Request,
    @common.Param() params: WedInvWhereUniqueInput
  ): Promise<WedInvStory[]> {
    const query = plainToClass(WedInvStoryFindManyArgs, request.query);
    const results = await this.service.findWedInvStories(params.id, {
      ...query,
      select: {
        createdAt: true,
        date: true,
        description: true,
        id: true,
        name: true,
        photo: true,
        updatedAt: true,

        wedInv: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/wedInvStories")
  @GrpcMethod("WedInvService", "connectWedInvStories")
  async connectWedInvStories(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvStoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvStories: {
        connect: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/wedInvStories")
  @GrpcMethod("WedInvService", "updateWedInvStories")
  async updateWedInvStories(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvStoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvStories: {
        set: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/wedInvStories")
  @GrpcMethod("WedInvService", "disconnectWedInvStories")
  async disconnectWedInvStories(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvStoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvStories: {
        disconnect: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/wedInvVideos")
  @ApiNestedQuery(WedInvVideoFindManyArgs)
  @GrpcMethod("WedInvService", "findManyWedInvVideos")
  async findManyWedInvVideos(
    @common.Req() request: Request,
    @common.Param() params: WedInvWhereUniqueInput
  ): Promise<WedInvVideo[]> {
    const query = plainToClass(WedInvVideoFindManyArgs, request.query);
    const results = await this.service.findWedInvVideos(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
        video: true,

        wedInv: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/wedInvVideos")
  @GrpcMethod("WedInvService", "connectWedInvVideos")
  async connectWedInvVideos(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvVideoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvVideos: {
        connect: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/wedInvVideos")
  @GrpcMethod("WedInvService", "updateWedInvVideos")
  async updateWedInvVideos(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvVideoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvVideos: {
        set: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/wedInvVideos")
  @GrpcMethod("WedInvService", "disconnectWedInvVideos")
  async disconnectWedInvVideos(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvVideoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvVideos: {
        disconnect: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/wedInvWeddings")
  @ApiNestedQuery(WedInvWeddingFindManyArgs)
  @GrpcMethod("WedInvService", "findManyWedInvWeddings")
  async findManyWedInvWeddings(
    @common.Req() request: Request,
    @common.Param() params: WedInvWhereUniqueInput
  ): Promise<WedInvWedding[]> {
    const query = plainToClass(WedInvWeddingFindManyArgs, request.query);
    const results = await this.service.findWedInvWeddings(params.id, {
      ...query,
      select: {
        createdAt: true,
        father: true,
        gender: true,
        id: true,
        mother: true,
        name: true,
        photo: true,
        updatedAt: true,

        wedInv: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/wedInvWeddings")
  @GrpcMethod("WedInvService", "connectWedInvWeddings")
  async connectWedInvWeddings(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvWeddingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvWeddings: {
        connect: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/wedInvWeddings")
  @GrpcMethod("WedInvService", "updateWedInvWeddings")
  async updateWedInvWeddings(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvWeddingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvWeddings: {
        set: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/wedInvWeddings")
  @GrpcMethod("WedInvService", "disconnectWedInvWeddings")
  async disconnectWedInvWeddings(
    @common.Param() params: WedInvWhereUniqueInput,
    @common.Body() body: WedInvWeddingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wedInvWeddings: {
        disconnect: body,
      },
    };
    await this.service.updateWedInv({
      where: params,
      data,
      select: { id: true },
    });
  }
}
