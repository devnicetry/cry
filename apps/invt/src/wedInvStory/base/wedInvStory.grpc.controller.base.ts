/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { WedInvStoryService } from "../wedInvStory.service";
import { WedInvStoryCreateInput } from "./WedInvStoryCreateInput";
import { WedInvStoryWhereInput } from "./WedInvStoryWhereInput";
import { WedInvStoryWhereUniqueInput } from "./WedInvStoryWhereUniqueInput";
import { WedInvStoryFindManyArgs } from "./WedInvStoryFindManyArgs";
import { WedInvStoryUpdateInput } from "./WedInvStoryUpdateInput";
import { WedInvStory } from "./WedInvStory";

export class WedInvStoryGrpcControllerBase {
  constructor(protected readonly service: WedInvStoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WedInvStory })
  @GrpcMethod("WedInvStoryService", "createWedInvStory")
  async createWedInvStory(
    @common.Body() data: WedInvStoryCreateInput
  ): Promise<WedInvStory> {
    return await this.service.createWedInvStory({
      data: {
        ...data,

        wedInv: data.wedInv
          ? {
              connect: data.wedInv,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        date: true,
        description: true,
        id: true,
        name: true,
        photo: true,
        updatedAt: true,

        wedInv: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WedInvStory] })
  @ApiNestedQuery(WedInvStoryFindManyArgs)
  @GrpcMethod("WedInvStoryService", "wedInvStories")
  async wedInvStories(@common.Req() request: Request): Promise<WedInvStory[]> {
    const args = plainToClass(WedInvStoryFindManyArgs, request.query);
    return this.service.wedInvStories({
      ...args,
      select: {
        createdAt: true,
        date: true,
        description: true,
        id: true,
        name: true,
        photo: true,
        updatedAt: true,

        wedInv: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WedInvStory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("WedInvStoryService", "wedInvStory")
  async wedInvStory(
    @common.Param() params: WedInvStoryWhereUniqueInput
  ): Promise<WedInvStory | null> {
    const result = await this.service.wedInvStory({
      where: params,
      select: {
        createdAt: true,
        date: true,
        description: true,
        id: true,
        name: true,
        photo: true,
        updatedAt: true,

        wedInv: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WedInvStory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("WedInvStoryService", "updateWedInvStory")
  async updateWedInvStory(
    @common.Param() params: WedInvStoryWhereUniqueInput,
    @common.Body() data: WedInvStoryUpdateInput
  ): Promise<WedInvStory | null> {
    try {
      return await this.service.updateWedInvStory({
        where: params,
        data: {
          ...data,

          wedInv: data.wedInv
            ? {
                connect: data.wedInv,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          date: true,
          description: true,
          id: true,
          name: true,
          photo: true,
          updatedAt: true,

          wedInv: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WedInvStory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("WedInvStoryService", "deleteWedInvStory")
  async deleteWedInvStory(
    @common.Param() params: WedInvStoryWhereUniqueInput
  ): Promise<WedInvStory | null> {
    try {
      return await this.service.deleteWedInvStory({
        where: params,
        select: {
          createdAt: true,
          date: true,
          description: true,
          id: true,
          name: true,
          photo: true,
          updatedAt: true,

          wedInv: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
